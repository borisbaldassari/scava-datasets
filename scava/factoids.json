{"cocomo":{"description":"COCOMO is crazy.","name":"Cocomo"},"org.eclipse.scava.factoid.bugs.channelusage.BugsChannelUsageFactoid":{"description":"summaryblah","name":"Bug Tracker Usage"},"org.eclipse.scava.factoid.bugs.emotion.BugsChannelEmotionFactoid":{"description":"summaryblah","name":"Bug Tracker Emotion"},"org.eclipse.scava.factoid.bugs.responsetime.BugsChannelResponseTimeFactoid":{"description":"summaryblah","name":"Bug Tracker Response Time"},"org.eclipse.scava.factoid.bugs.sentiment.BugsChannelSentimentFactoid":{"description":"summaryblah","name":"Bug Tracker Sentiment"},"org.eclipse.scava.factoid.bugs.severity.BugsChannelSeverityFactoid":{"description":"summaryblah","name":"Bug Tracker Severity"},"org.eclipse.scava.factoid.bugs.status.BugsChannelStatusFactoid":{"description":"summaryblah","name":"Bug Tracker Status"},"org.eclipse.scava.factoid.bugs.threadlength.BugsChannelThreadLengthFactoid":{"description":"summaryblah","name":"Bug Tracker Thread Length"},"org.eclipse.scava.factoid.bugs.users.BugsChannelUsersFactoid":{"description":"summaryblah","name":"Bug Tracker Users"},"org.eclipse.scava.factoid.bugs.weekly.BugsChannelWeeklyFactoid":{"description":"summaryblah","name":"Bug Tracker Weekly"},"org.eclipse.scava.factoid.newsgroups.channelusage.NewsgroupsChannelUsageFactoid":{"description":"summaryblah","name":"Newsgroup Channel Usage"},"org.eclipse.scava.factoid.newsgroups.emotion.NewsgroupsChannelEmotionFactoid":{"description":"summaryblah","name":"Newsgroup Channel Emotion"},"org.eclipse.scava.factoid.newsgroups.responsetime.NewsgroupsChannelResponseTimeFactoid":{"description":"summaryblah","name":"Newsgroup Channel Response Time"},"org.eclipse.scava.factoid.newsgroups.sentiment.NewsgroupsChannelSentimentFactoid":{"description":"summaryblah","name":"Newsgroup Channel Sentiment"},"org.eclipse.scava.factoid.newsgroups.severity.NewsgroupsChannelSeverityFactoid":{"description":"summaryblah","name":"Newsgroup Channel Severity"},"org.eclipse.scava.factoid.newsgroups.status.NewsgroupsChannelStatusFactoid":{"description":"summaryblah","name":"Newsgroup Channel Status"},"org.eclipse.scava.factoid.newsgroups.threadlength.NewsgroupsChannelThreadLengthFactoid":{"description":"summaryblah","name":"Newsgroup Channel Thread Length"},"org.eclipse.scava.factoid.newsgroups.users.NewsgroupsChannelUsersFactoid":{"description":"summaryblah","name":"Newsgroup Channel Users"},"org.eclipse.scava.factoid.newsgroups.weekly.NewsgroupsChannelWeeklyFactoid":{"description":"summaryblah","name":"Newsgroup Channel Weekly"},"rascal.generic.churn.churnVolume":{"description":"Reporting how much work is actually done to the system currently and in the last six months.","name":"Churn Volume"},"rascal.generic.churn.commitLocality":{"description":"Find out if commits are usually local to a file or widespread over the system. If the commits are widespread this can mean either a problem with \nseparation of concerns in the architecture of the system, or that the developers are not concentrating on one task at the same time.","name":"Commit locality"},"rascal.generic.churn.commitSize":{"description":"The activity of a project is characterized by the number of contributions per time unit and their size. We also report on the size of each unit of work (commit) size. Commits should not be to big all the time, because that would indicate either that programmers are not focusing on well-defined tasks or that the system architecture does not allow for separation of concerns.","name":"Commit frequency and size"},"rascal.testability.java.JavaUnitTestCoverage":{"description":"How well do the project's unit tests cover its code? A static approximation is done, measuring the code which would be executed if all JUnit tests are run. \nThis analysis may produce a higher number than a dynamic analysis would (due to dynamic dispatch and overriding) but it indicates bad coverage easily and it follows the trend.","name":"Java unit test coverage"},"style.errorProneFactoid":{"description":"Explains what the impact of error prone style violations is for the project. If problems are widespread this may be a quality contra-indicator, while a localized problem could be easily fixed.","name":"Error proneness"},"style.inefficientStringsFactoid":{"description":"Explains what the impact of inefficient string management is for the project. If problems are widespread this may be a quality contra-indicator, while a localized problem could be easily fixed.","name":"Inefficient string management"},"style.understandabilityFactoid":{"description":"Explains what the impact of code understandability style violations is for the project. If problems are widespread this may be a quality contra-indicator, while a localized problem could be easily fixed.","name":"Code understandability"},"trans.rascal.CC.java.CCJavaFactoid":{"description":"The cyclometic complexity of the project's Java code indicates on the lowest code level (inside the body of methods) how hard the code to test is and also provides contra indications for underdstandability.","name":"Cyclomatic Complexity for Java"},"trans.rascal.LOC.codeSize":{"description":"The size\/volume of a system is telling for the expected complexity and cost of ownership. The type and number of programming languages used also indicate\ncomplexity and the kind of expertise needed to maintain the system. We combine this information with the number of people working on the project because a large\nproject is expected to be supported by a large community.","name":"Code Size"},"trans.rascal.OO.java.Cohesion-Java":{"description":"Java cohesion","name":"Java cohesion"},"trans.rascal.OO.java.Coupling-Java":{"description":"Coupling between Java classes counts dependencies between class definitions. The higher the coupling between classes, the harder a system is to test and to maintain.","name":"Java coupling"},"trans.rascal.clones.cloneCode":{"description":"The amount of code in the project in Type I clones larger than 6 lines. A Type I clone is a literal clone. If a considerable part of a large project \nconsists of cloned code there may be maintainability risks.","name":"Code Cloning"},"trans.rascal.comments.commentPercentage":{"description":"The balance between comments and code indicates understandability. Too many comments are often not maintained and may lead to confusion, not enough means the code lacks documentation explaining its intent.","name":"Percentage of lines with comments (excluding headers)"},"trans.rascal.comments.headerUse":{"description":"In principle it is expected for the files in a project to share the same license. The license text in the header of each file may differ slightly due to different copyright years and or lists of contributors. We find out how many different types of header files are used and if the distribution is flat or focused on a single distribution. The difference is between  a clear and simple license for the entire project or a confusing licensing scheme with possible juridical consequences.","name":"Consistency of header use"},"trans.rascal.comments.percentageCommentedOutCode":{"description":"Commented-out code, in large quantities, is a contra-indicator for quality being a sign of experimental code or avoiding the use of a version control system.","name":"Percentage of commented out code"},"trans.rascal.readability.ReadabilityFactoid":{"description":"We measure file readability by counting exceptions to common usage of whitespace in source code, such as spaces after commas. We find out  \nhow many of the files have how many of these deviations. A few deviations per file is ok, but many files with many deviations indicates a\nlack of attention to readability.","name":"Use of whitespace"}}